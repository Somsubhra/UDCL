#!/usr/bin/env python

# Headers
__author__ = "Somsubhra Bairi"
__email__ = "somsubhra.bairi@gmail.com"
__license__ = "WTFPL (Do What The Fuck You Want to Public License)"
__version__ = "0.1.0"


# All imports
import sys
import json
import urllib2
import urllib
import os


# Define constants
API_URL = "http://api.urbandictionary.com/v0/define"


# The Urban Dictionary
# Command Line class
class UDCL:

  # Constructor
  def __init__(self):

    # If less than 2 arguments
    if len(sys.argv) < 2:
      self.console_show_usage("udcl <word>")
      self.console_show_message("Urban Dictionary Command Line (v" + __version__ + ")")
      self.console_show_message("Written by " + __author__ + "<" + __email__ + ">")
      self.console_show_message("Licensed under " + __license__)
      return

    # Create the word sequence
    self.word = ' '.join(sys.argv[1:])

    self.fetch_meaning()


  # Fetch the meaning of the word
  def fetch_meaning(self):

    target_url = self.get_api_url(self.word)

    # Fetch the data
    data = json.load(urllib2.urlopen(target_url))

    meaning_list = data["list"]

    len_meaning_list = len(meaning_list)

    # If no results are found
    if len_meaning_list < 1:
      self.console_show_error("No results found :(")
      return

    # Display the output
    self.console_show_highlighted('\n' + self.word + " (" + str(len_meaning_list) + " results)")
    self.console_show_separator()

    for meaning in meaning_list:
      self.console_show_meaning(meaning["definition"])


  # Get the API url for the given word
  def get_api_url(self, word):
    query = {'term': word}
    return API_URL + '?' + urllib.urlencode(query)


  # Show error message on console
  def console_show_error(self, message):
    print "\033[91m" + "Error: " + message + "\033[0m"


  # Show success message on console
  def console_show_highlighted(self, message):
    print "\033[92m" + message + "\033[0m"


  # Show meaning on console
  def console_show_meaning(self, message):
    self.console_show_message(message)
    self.console_show_separator()


  # Show message on console
  def console_show_message(self, message):
    print "\033[94m" + message + "\033[0m"


  # Show separator on console
  def console_show_separator(self):
    rows, columns = os.popen('stty size', 'r').read().split()
    print "\033[93m" + ('-' * int(columns)) + "\033[0m"


  # Show command usage on console
  def console_show_usage(self, message):
    print "\033[93m" + "Usage: " + message + "\033[0m"


# The main method
def main():
  udcl = UDCL()

# Call the main method
if __name__ == "__main__":
  main()
